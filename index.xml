<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Narayana on</title><link>https://marcosgopen.github.io/</link><description>Recent content in Narayana on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright (c) 2020-2021 Henk Verlinde</copyright><lastBuildDate>Tue, 06 Oct 2020 08:47:36 +0000</lastBuildDate><atom:link href="https://marcosgopen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture</title><link>https://marcosgopen.github.io/architecture/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/architecture/</guid><description>This page contains references to various architecture papers and documents related to the JBoss Transaction Service. Since the product has been around for many years, some of these documents may be out-of-date; where necessary, we will update them, so watch this space! Some general notes first:
ArjunaCore is the transaction system at the heart of all of our transaction products. It is flexible, supporting ACID transactions as well as extended transactions.</description></item><item><title>Certifications</title><link>https://marcosgopen.github.io/certifications/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/certifications/</guid><description>LRA Certifications #
LRA 1.0 Compatible Certification Request (CCR) #
Getting Started #
Download the latest version of Narayana standalone Or download the latest release of WildFly Read our getting started documentation Run our quickstarts Meet the team Get involved! Latest forum discussions #
Latest news #
Compliance #
GNU Lesser General Public License, Version 2.1 Tested with Arquillian</description></item><item><title>Community</title><link>https://marcosgopen.github.io/community/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/community/</guid><description>Forum #
Narayana user forum is the best place to ask any project related questions, give suggestions, or request a new feature.
Chat #
Start contributing to our open conversations in our Zulip open-source organisation!
Blog #
All the latest Narayana project news and other interesting stuff is published in our blog.
Visit Narayana Forum{.btn
Chat With Us{.btn .btn-primary}
Visit Narayana Blog{.btn .btn-primary}
Mailing Lists #
Also, we have a number of mailing lists available for you to subscribe:</description></item><item><title>Documentation</title><link>https://marcosgopen.github.io/documentation/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/documentation/</guid><description>Learn to use Narayana #
Narayana Guide (Community-only features)
Narayana Guide (EAP product related features)
Narayana Quickstarts
Narayana Javadocs
Wiki #
Our community users have also contributed a lot of useful content for various practical applications of the transaction manager that can act as a companion to the main documentation set. To access this, visit the articles section of the Narayana community space on jboss.org: Visit Narayana Wiki
Specifications #
WS-Coordination, v1.</description></item><item><title>Download other</title><link>https://marcosgopen.github.io/downloads-other/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/downloads-other/</guid><description>Date
License
4.17.27.Final
2014-12-23
LGPL
Narayana 4.17.27.Final Binary
LGPL
Narayana 4.17.27.Final Source Code
4.16.6.Final
2012-10-02
LGPL
Narayana 4.16.6.Final Binary
LGPL
Narayana 4.16.6.Final Source Code
4.15.0.Final
2011-04-26
LGPL
Narayana 4.15.0.Final Binary
LGPL
Narayana 4.15.0.Final Source Code
4.13.1.Final
2010-10-06
LGPL
Narayana 4.13.1.Final Binary
LGPL
Narayana 4.13.1.Final Source Code
4.11.0.Final
2010-05-14
LGPL
Narayana 4.11.0.Final Binary
LGPL
Narayana 4.11.0.Final Source Code
4.9.0.GA
2009-12-14
LGPL
Narayana 4.9.0.GA Binary
LGPL
Narayana 4.9.0.GA Source Code
4.8.0.GA
Wed Oct 07 11:20:06 EDT 2009</description></item><item><title>Downloads</title><link>https://marcosgopen.github.io/downloads/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/downloads/</guid><description>Latest Narayana Release #
Version
Date
License
Narayana Binary
5.13.1.Final
2022-11-16
LGPL
Narayana Source Code
5.13.1.Final
2022-11-16
LGPL
Legacy Narayana versions
Other related files #
Narayana JTS IDL Files #
ArjunaOTS.idl CosTSInteroperation.idl CosTSPortability.idl CosTransactions.idl TSIdentification.idl XA.idl Narayana XTS WSDL and XSD Files #
WS-C wscoor 1.1 WS-T wsarjtx WS-T wscoor 1.1 Getting Started #
Download the latest version of Narayana standalone Or download the latest release of WildFly Read our getting started documentation Run our quickstarts Meet the team Get involved!</description></item><item><title>Governance</title><link>https://marcosgopen.github.io/governance/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/governance/</guid><description>Governance #
:::
::: {.row-fluid} ::: {.span12 .well .post-bg}
Stewardship #
This project is developed and released by Red Hat with assistance from the Java developer community. The project lead is appointed by Red Hat, and has the power to accept and reject contributions to the project and set the roadmap. Red Hat employees assigned to work on Narayana as well as community contributors, in this regard, all answer to the project lead.</description></item><item><title>History</title><link>https://marcosgopen.github.io/history/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/history/</guid><description>On December 5th 2005, JBoss announced it acquired and would open source Java and Web Services distributed transaction management technology owned by Arjuna Technologies and HP. This move further propels the JBoss Enterprise Middleware Suite (JEMS) into the high-end market long presided over by proprietary application platforms. The acquisition includes Arjuna Transaction Service Suite (ArjunaTS), one of the most advanced transaction engines in the world with a 20-year-old pedigree, and Arjuna's Web Services Transaction implementation, the market's only implementation supporting both leading web services specifications Web Services Transaction (WS-TX) and Web Services Composite Application Framework (WS-CAF).</description></item><item><title>Jakarta EE support</title><link>https://marcosgopen.github.io/jakarta-ee-support/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/jakarta-ee-support/</guid><description>Narayana implements the Jakarta Transactions 2.0 specification.
Narayana is a 100% Java implementation of a distributed transaction management system based on the Sun Microsystems Java Transaction Service (JTS) standard. Our implementation of the JTS utilizes the Object Management Group's (OMG) Object Transaction Service (OTS) model for transaction interoperability as referenced in Jakarta Enterprise Beans 8.1.3 and leads the market in providing many advanced features such as fully distributed transactions and ORB portability with POA support.</description></item><item><title>Long Running Actions (LRA)</title><link>https://marcosgopen.github.io/lra/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/lra/</guid><description>Long Running Actions (abbreviated as LRA ) is a MicroProfile specification that introduces APIs for services to coordinate activities. For more information check site https://github.com/eclipse/microprofile-lra .
Narayana implements the LRA specification.
Certifications #
LRA 1.0 Compatible Certification Request (CCR) Narayana LRA Coordinator OpenAPI Schema #
Version: 1.0, format: YAML
Version: 1.0, format: JSON</description></item><item><title>Narayana features</title><link>https://marcosgopen.github.io/narayana-features/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/narayana-features/</guid><description>Narayana is a pure Java multi-modal transaction service that supports distributed transactions in CORBA, J2EE and Web services environments.
::: :::
JTA
JTS
XTS
Compensations Framework
RTS
STM
Arjuna
TXOJ
ACID
✔
✔
✔
✔
✔
✔
✔
Synchronizations
✔
✔
✔
✔
✔
Nested transactions
✔
✔
✔
✔
✔
✔
Automated failure recovery
✔
✔
✔
✔
✔
✔
Transaction log (file system, JDBC, HornetQ)
✔
✔
✔</description></item><item><title>Platform support</title><link>https://marcosgopen.github.io/platform-support/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/platform-support/</guid><description> Supported Java runtime environments: J2SE1.3.x J2SE1.4.x J2SE1.5x (in JBossAS 5.0) Web services plaforms: webMethods Glue 5 Apache Axis on JBoss WebLogic JBossTS is 100% Java and should therefore operate on any operating system with a suitable Java runtime environment. However, JBossTS is explicitly QA'd and supported on</description></item><item><title>Presentations</title><link>https://marcosgopen.github.io/presentations/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/presentations/</guid><description>This page contains references to presentations that have been given over the years around various aspects of the JBoss Transaction Service (or its predecessor, the Arjuna Transaction Service).
A webinar on JBoss Transactions 4.2.
XA recovery in ATS 3.2.
An overview of the 1.0 release of the Web Services Transactions component..
Standards Related #
OASIS WS-TX overview. by Mark Little, October 29th 2007, OASIS Forum, London.
General Presentations
Transaction Processing in a Service Oriented Architecture.</description></item><item><title>Sub-projects</title><link>https://marcosgopen.github.io/sub-projects/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/sub-projects/</guid><description>Business Activity Framework #
The Business Activity Framework is a fully novel comprehensive solution for building transactional Web Services with accordance to the model defined in the WS-BusinessActivity specification. It provides a lightweight API that consists of a set of easy to learn and intuitive annotations and operations. It significantly facilitates development of transaction aware Web Services and releases programmers from mixing transaction related code with business logic of their applications.</description></item><item><title>Transaction fundamentals</title><link>https://marcosgopen.github.io/transaction-fundamentals/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/transaction-fundamentals/</guid><description>This page contains references to a selection of papers around the fundamentals of transaction processing.
Why do you need (distributed) transactions? An overview of the things you should consider when deciding if you need transaction management in your architecture.
What are end-to-end transactions and can JBossTS support them? An abridged version of this paper was published in the Java Developers Journal, 2001.
A framework for implementing extended transactions. A paper on the OMG's Extended Transaction framework, for the High Performance Transaction Systems Workshop, 2001.</description></item><item><title>Web services support</title><link>https://marcosgopen.github.io/web-services-support/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/web-services-support/</guid><description>Developers and IT organizations won't implement any important Web services without being able to guarantee that they will be executed in a guaranteed manner. -- Ronald Schmelzer, ZapThink
In traditional ACID transaction systems, transactions are short lived, resources (such as databases) are locked for the duration of the transaction and participants have a high degree of trust with each other. With the advent of the Internet and Web services, the scenario that is now emerging requires involvement of participants unknown to each other in distributed transactions.</description></item><item><title>What is ArjunaCore?</title><link>https://marcosgopen.github.io/arjuna-core/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://marcosgopen.github.io/arjuna-core/</guid><description>ArjunaCore is a stand-alone transaction engine and associated toolkit for the construction of fault-tolerant applications using objects and (nested) atomic transactions. It forms the core component of several different HP products, including HP-TS, HP-WST and HP-MS and their Arjuna Technologies equivalents (ATS, AWST, AMS and the new AXTS.)
Atomic transactions (transactions) are used in application programs to control the manipulation of persistent (long-lived) objects. Transactions have the following ACID properties:</description></item><item><title>Docs</title><link>https://marcosgopen.github.io/docs/</link><pubDate>Tue, 06 Oct 2020 08:48:23 +0000</pubDate><guid>https://marcosgopen.github.io/docs/</guid><description/></item></channel></rss>